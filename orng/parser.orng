std = import "<std>"
Node = (import "nodes.orng").Node

Token = (data:String, line:Int, col:Int)

Parser = (
    index:Int
    tokens:std.List Token

    let create:(contents:String)->!&Parser = {
        var retval = new(Parser, (0, std.List(Token).create()))

        var data = contents[..1]
        var line = 1
        var col = 1
        var oldCol = 1
        var oldC = contents[0]
        var i = 1
        while i < contents.len {
            var c = contents[i]
            if oldC == '\n' || oldC == '\r' or (isSpecialChar(oldC) != isSpecialChar c) || c == '#' || c == '[' || c == '(' || c == '!' || c == '\n' || c == '\r' {
                if !data.contains '\r' {
                    try retval.tokens.append (data, line, oldCol)
                }
                oldCol = col + 1
                if c == '\n' {
                    line += 1
                    col = 0
                }
                data.ptr += data.len
                while oldC == '#' && data[0] < 32 {
                    i += 1
                    data.ptr += 1
                }
                data.len = 0
            }
            i += 1
            data.len += 1
            col += 1
            oldC = c
        }
        try retval.tokens.append(data, line, col)
        try retval.tokens.append("\n", line, col)
        retval
    }

    let pop:(self: &Parser)->Token = {
        self.index += 1
        self.tokens.items[self.index - 1]
    }

    let peek:(self: &Parser)->Token = self.tokens.items[self.index]

    let accept:(self: &Parser, data:String)->?Token =
        if self.peek().data.equals(data) {
            self.pop()
        } else {
            null
        }

    let expect:(self: &Parser, data:String)->() =
        if self.accept(data) == null {
            var top = self.peek()
            if isSpecialChar(top.data[0]) {
                std.log.err("error: {}:{} expected `{s}`, got `{s}`.", .{top.line, top.col, data, top.data})
            } else {
                std.log.err("error: {}:{} expected `{s}`, got text.", .{top.line, top.col, data})
            }
            std.sys.exit(1)
        }

    let takeUntil:(self: &Parser, sentinel:String)->String = {
        var data = self.peek().data
        var lastPtr = data.ptr
        while self.accept(sentinel) == null {
            lastPtr = self.pop().data.ptr
        }
        lastPtr = self.tokens.items[self.index - 1].data.ptr
        data.len = lastPtr - data.ptr
        data
    }

    let parseNode:(self: &Parser)->?Node =
        if self.accept("#") != null {
            self.parseHeader()
        } else if self.accept("```") != null {
            self.parseCodeBlock()
        } else if self.accept("!") != null {
            self.parseImage()
        } else if self.accept("\n") == null {
            self.parseParagraph()
        } else {
            null
        }

    let parseHeader:(self: &Parser)->Node = {
        var size = 1
        while self.accept("#") != null {
            size += 1
        }
        var bounds = std.List(String).create()
        bounds.append("\n") catch unreachable
        (.header=(size, self.parseFormattedText(bounds)))
    }

    let parseParagraph:(self: &Parser)->Node = {
        var bounds = std.List(String).create()
        bounds.append("\n") catch unreachable
        (.paragraph=(self.parseFormattedText(bounds)))
    }

    let parseCodeBlock:(self: &Parser)->Node = (.codeblock=(self.takeUntil("```")))

    let parseImage:(self: &Parser)->Node = {
        self.expect("[")
        var text = self.pop().data
        self.expect("]")
        self.expect("(")
        var url = self.pop().data
        self.expect(")")
        (.image=(text, url))
    }

    let parseItalic:(self: &Parser, bounds:std.List(String))->Node = {
        var newBounds = std.List(String).init()
        for (bound in bounds.items) {
            newBounds.append(bound) catch unreachable
        }
        newBounds.append("*") catch unreachable
        newBounds.append("_") catch unreachable
        var children = self.parseFormattedText(allocator, newBounds)
        if self.accept("*") == null {
            self.expect("_")
        }
        (.italic=(children))
    }

    let parseBold:(self: &Parser, bounds:std.List(String))->Node = {
        var newBounds = std.List(String).init()
        for (bound in bounds.items) {
            newBounds.append(bound) catch unreachable
        }
        newBounds.append("**") catch unreachable
        newBounds.append("__") catch unreachable
        var children = self.parseFormattedText(allocator, newBounds)
        if self.accept("**") == null {
            self.expect("__")
        }
        (.bold=(children))
    }

    let parseCode:(self: &Parser)->Node = (.code=(self.takeUntil("`")));

    let parseLink:(self: &Parser)->Node = {
        var text = self.pop().data
        self.expect("]")
        self.expect("(")
        var url = self.pop().data
        self.expect(")")
        (.link=(text, url))
    }

    let parseFormattedText:(self: &Parser, bounds: std.ArrayList([]String))-> std.List(Node) = {
        var retval = std.ArrayList(Node).init()
        while (!bounds.contains(self.peek().data)) {
            if self.accept("_") != null or self.accept("*") != null {
                retval.append(self.parseItalic(allocator, bounds)) catch unreachable
            } else if self.accept("__") != null or self.accept("**") != null {
                retval.append(self.parseBold(allocator, bounds)) catch unreachable
            } else if self.accept("`") != null {
                retval.append(self.parseCode()) catch unreachable
            } else if self.accept("[") != null {
                retval.append(self.parseLink()) catch unreachable
            } else {
                retval.append((.text=(.text=self.pop().data))) catch unreachable
            }
        }
        retval
    }
)

isSpecialChar:(c:Char)->Bool =
    c == '_' ||
    c == '*' ||
    c == '`' ||
    c == '#' ||
    c == '[' ||
    c == ']' ||
    c == '(' ||
    c == ')' ||
    c == '!'

